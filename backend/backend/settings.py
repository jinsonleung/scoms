"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os.path
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 该语句的作用：让django到apps目录下寻找app
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-t3n#w1-qwto&+!lt!g(=kr0+97s%%kc%ue^8&gdbufbsa@4o!u'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # ==框架==
    'rest_framework',  # rest框架
    'django_filters',   # django过滤器
    'corsheaders',  # 允许跨域请求
    # ==测试demo==
    'demo.student',     # 用于测试
    'demo.school',     # 用于测试
    'demo.cars',    # 用于测试
    # ==apps==
    'public',      # 公共app
    'enterprise',    # 企业信息
    'supplier',      # 供应商
    'universalCode',  # 国家/城市/机场代码
]

# 中间件
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 允许跨域
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware', # 注释此行，否则POST请时出现Forbidden (CSRF cookie not set.)
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'backend.wsgi.application'

# 数据库配置
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    # 'default': {  # 配置SQLITE数据库
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {  # 配置mysql数据库
        # 'OPTIONS': {'charset': 'utf8mb4'},  #mb4字符集支持emoji表情
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': 'scomsdb',  # 数据库名，自己本地创建
        'USER': 'root',  # 数据库用户名
        'PASSWORD': 'China123',  # 数据库密码
        'HOST': 'localhost',  # MySQL服务所在主机IP
        'PORT': '3306',  # MySQL服务端口
    }
}

# 密码验证配置
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 国际化配置
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False  # USE_TZ默认为为True，默认时使用UTC格式时间，设置为False则表示使用本地时间

# 静态文件目录配置，这是不变动的资源存放目录，如CSS、js、背景图片等，可为Templates模板提供支持
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'  # 可以理解为通过url访问static文件的路径

# 默认主键字段类型配置
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ===================自行配置====================
# 1、***** 跨域配置 *****
# CORS_ORIGIN_ALLOW_ALL如果为True，则将不使用白名单，并且将接受所有来源。默认为False
CORS_ORIGIN_ALLOW_ALL = True
# 允许cookie, 指明在跨域访问中，后端是否支持对cookie的操作
CORS_ALLOW_CREDENTIALS = True
# 白名单，CORS_ORIGIN_ALLOW_ALL如果为True，则将不使用白名单
CORS_ORIGIN_WHITELIST = (   # 请求白名单
    ['http://127.0.0.1:*']
)

# CORS_ALLOW_METHODS = (  # 允许的请求方式
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
#     'VIEW',
# )
#
# CORS_ALLOW_HEADERS = (  # 允许的请求头
#     'XMLHttpRequest',
#     'X_FILENAME',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# )

# 2、上传图片保存路径配置
IMG_UPLOAD = os.path.join(BASE_DIR, 'static/uploads')

# 3、媒体文件目录配置，这是变动的资源存放目录，如用户头像/上传的图片或视频等,可为富文本编辑器mdeditor提供支持
MEDIA_URL = '/media/'   # 可以理解为通过url访问媒体文件目录路径
MEDIA_ROOT = (
    os.path.join(BASE_DIR, 'media'),
    # os.path.join(BASE_DIR, 'demo/book_shop/media')   # 在根目录中创建'book_shop/media'目录，保存文件时将放在这个目录下
)

# 4、日期输入格式
# DATE_INPUT_FORMATS = ['%d/%m/%Y']

# 5、REST_FRAMEWORK配置
REST_FRAMEWORK = {
    # REST_FRAMEWORK配置均为[全局配置]
    # 5.1.过滤查询配置（过滤与排序使用同一公用配置项）
    # 'DEFAULT_FILTER_BACKENDS': (
    #     'django_filters.rest_framework.DjangoFilterBackend',    # 过滤
    #     rest_framework.filters.OrderingFilter,  # 排序
    # ),
    # # 5.2.认证配置
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     # 'rest_framework.permissions.IsAuthenticated',
    #     'enterprise.permissions.DisableOptionsPermission',
    # ),
    # # 5.3.权限配置
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    # ),
    # # 5.4.元数据类配置
    # 'DEFAULT_METADATA_CLASS': None,
    # 5.5.渲染器配置
    'DEFAULT_RENDERER_CLASSES': (
        'utils.rendererResponse.BaseJsonRenderer',  # 自定义response响应返回json格式,本项目使用此配置，若注释掉则使用默认的drf html返回格式
        # 'rest_framework.renderers.JSONRenderer',  # json渲染器，返回json数据
        # 'rest_framework.renderers.BrowsableAPIRenderer',  # 浏览器API渲染器，返回调试界面
        # 'drf_renderer_xlsx.renderers.XLSXRenderer',
    ),
    # # 5.6.转换类
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.JSONParser',
    #     'rest_framework.parsers.FormParser',
    #     'rest_framework.parsers.MultiPartParser',
    # ),
    # 5.7.自定义DRF异常处理配置
    'EXCEPTION_HANDLER': 'utils.exceptionHandle.base_exception_handler',
    # 5.8.自动生成API接口文档CoreApi组件,DRF3.11.1用不了coreApi
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 5.9 日期时间格式化
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATETIME_INPUT_FORMATS': ('%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M'),
    'DATE_FORMAT': '%Y-%m-%d',
    'DATE_INPUT_FORMATS': ('%Y-%m-%d',),
    'TIME_FORMAT': '%H:%M:%S',
    'TIME_INPUT_FORMATS': ('%H:%M:%S',),
}
